package com.wanjia.infoshopmallmanage.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.wanjia.infoshopmallmanage.entity.Admin;
import com.wanjia.infoshopmallmanage.entity.MessPublish;
import com.wanjia.infoshopmallmanage.entity.User;
import com.wanjia.infoshopmallmanage.entity.Warningmsg;
import com.wanjia.infoshopmallmanage.mapper.AdminMapper;
import com.wanjia.infoshopmallmanage.mapper.MessPublishMapper;
import com.wanjia.infoshopmallmanage.mapper.UserMapper;
import com.wanjia.infoshopmallmanage.util.DateUtils;
import com.wanjia.infoshopmallmanage.util.FileuploadUtil;
import com.wanjia.infoshopmallmanage.util.RestResponse;

@Service
public class MessPublishService {
	@Autowired
	private UserMapper userMapper;
	@Autowired
	private AdminMapper adminMapper;
	@Autowired
	private FileuploadUtil fileuploadUtil;
	@Autowired
	private MessPublishMapper messPublishMapper;
	/**
	 * 平台消息新增
	 * @param mp
	 * @return
	 */
	public RestResponse add(MessPublish mp) {
    	 //找出用户信息
    	 Admin  admin=	adminMapper.queryById(mp.getAdmin());
 	    User user=    	userMapper.queryById(admin.getUserId());
 	    mp.setUserId(admin.getUserId());
 	    mp.setCreateTime(DateUtils.currentTime());
 	    //判断是不是平台用户
 	   if(user.getUserRole()!=3)return RestResponse.fail("您不是平台用户无法发送平台消息");

 	    if(mp.getMessType()==1) {
 	    //批量新增图片
 			List<MultipartFile> list=mp.getFiles();
 	      	//判断文件集合里是否有文件
 	      	if(list.size()>0) {
 	      	int []filenum1=new int[list.size()];
 	      	for (int i=0;i<list.size();i++) {
 	      		MultipartFile multipartFile2=list.get(i);
 	      		//找到文件是否合法
 	      		filenum1 [i]=multipartFile2.getOriginalFilename().indexOf(".");
 	      		//如果不合法就删除
 	      		if(filenum1 [i]==-1)list.remove(i);
 	  		}
 	      	mp.setMessImage(fileuploadUtil.batchFileUpload(mp.getFiles(), user.getUsername()))	;
 	      	}
 	    	
 	    }else {
 	    	//视频新增
 	       int filenum=1;
 	    	  if(mp.getFile().getOriginalFilename()!=null&&!"".equals(mp.getFile().getOriginalFilename()))
 	     		  filenum	= mp.getFile().getOriginalFilename().lastIndexOf(".");
 	    	 if (filenum!=-1)	mp.setMessVidio(fileuploadUtil.fileUpload(mp.getFile(), user.getUsername()));;
 	    }
 	int num=   messPublishMapper.insert(mp);
 	return num>0?RestResponse.ok("新增成功"):RestResponse.fail("新增失败");
     }
    /**
     * 消息修改
     * @param mp 消息修改成功
     * @return
     */
	public RestResponse update(MessPublish mp) {
    	 //找出用户信息
    	 Admin  admin=	adminMapper.queryById(mp.getAdmin());
 	    User user=    	userMapper.queryById(admin.getUserId());
 	    mp.setUserId(admin.getUserId());
 	    mp.setCreateTime(DateUtils.currentTime());
 	    //判断用户是不是平台用户
 	   if(user.getUserRole()!=3)return RestResponse.fail("您不是平台用户无法发送平台消息");
 	   //找出要修改的消息
 	   MessPublish messPublish=messPublishMapper.queryById(mp.getId());
 	   //删除图片
 	    if(messPublish.getMessImage()!=null&&!"".equals(messPublish.getMessImage())) {
 	    	String []imgs=messPublish.getMessImage().split(",");
 	    	for (int i = 0; i < imgs.length; i++) {
 	    		fileuploadUtil.removeFile(imgs[i]);
			}
 	    }
 	    if(messPublish.getMessVidio()!=null&&!"".equals(messPublish.getMessVidio())) fileuploadUtil.removeFile(messPublish.getMessVidio());

 	    if(mp.getMessType()==1) {
 	    //批量新增图片
 			List<MultipartFile> list=mp.getFiles();
 	      	//判断文件集合里是否有文件
 	      	if(list.size()>0) {
 	      	int []filenum1=new int[list.size()];
 	      	for (int i=0;i<list.size();i++) {
 	      		MultipartFile multipartFile2=list.get(i);
 	      		//找到文件是否合法
 	      		filenum1 [i]=multipartFile2.getOriginalFilename().indexOf(".");
 	      		//如果不合法就删除
 	      		if(filenum1 [i]==-1)list.remove(i);
 	  		}
 	      	mp.setMessImage(fileuploadUtil.batchFileUpload(mp.getFiles(), user.getUsername()))	;
 	      	}
 	    	
 	    }else {
 	    	//视频新增
 	       int filenum=1;
 	    	  if(mp.getFile().getOriginalFilename()!=null&&!"".equals(mp.getFile().getOriginalFilename()))
 	     		  filenum	= mp.getFile().getOriginalFilename().lastIndexOf(".");
 	    	 if (filenum!=-1)	mp.setMessVidio(fileuploadUtil.fileUpload(mp.getFile(), user.getUsername()));;
 	    }
 	   int num=   messPublishMapper.update(mp);
 	   return num>0 ?RestResponse.ok("消息修改成功"):RestResponse.fail("消息修改失败");
     }
	/**
	 * 消息删除
	 * @param adminId 管理员id
	 * @param id      删除id
	 * @return
	 */
	public RestResponse delete(Long adminId,Long id) {
		 Admin  admin=	adminMapper.queryById(adminId);
	 	User user=    	userMapper.queryById(admin.getUserId());
 	    //判断用户是不是平台用户
 	   if(user.getUserRole()!=3)return RestResponse.fail("您不是平台用户无法发送平台消息");
 	   //找出要修改的消息
 	   MessPublish messPublish=messPublishMapper.queryById(id);
 	   //删除图片
 	    if(messPublish.getMessImage()!=null&&!"".equals(messPublish.getMessImage())) {
 	    	String []imgs=messPublish.getMessImage().split(",");
 	    	for (int i = 0; i < imgs.length; i++) {
 	    		fileuploadUtil.removeFile(imgs[i]);
			}
 	    }
 	   if(messPublish.getMessVidio()!=null&&!"".equals(messPublish.getMessVidio())) fileuploadUtil.removeFile(messPublish.getMessVidio());
 	   int num=messPublishMapper.deleteById(id);
 	  return num>0?RestResponse.ok("删除成功"):RestResponse.fail("删除失败");
 	   
	}
	/**
	 * 平台消息获取
	 * @param mp
	 * @return
	 */
	public RestResponse list(MessPublish mp) {
		PageHelper.startPage(mp.getPageNo(),20);
		//找出用户信息
   	    Admin  admin=	adminMapper.queryById(mp.getAdmin());
	    User user=    	userMapper.queryById(admin.getUserId());
	    if(user.getUserRole()!=3)return RestResponse.fail("您不是平台用户");
	    mp.setUserId(user.getId());
	   
	    List<MessPublish> list=  messPublishMapper.queryAll(mp);
	    PageInfo<MessPublish> page = new PageInfo<MessPublish>(list);
	    return RestResponse.ok("获取成功", page);
	}
}
